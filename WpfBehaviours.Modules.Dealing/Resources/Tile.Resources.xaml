<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	                xmlns:viewModels="clr-namespace:WpfBehaviours.Modules.Dealing.ViewModels"
                    xmlns:attachedProps="clr-namespace:WpfBehaviours.Infrastructure.AttachedProps;assembly=WpfBehaviours.Infrastructure"
                    xmlns:controls="clr-namespace:WpfBehaviours.Modules.Dealing.Controls"
                    xmlns:converters="clr-namespace:WpfBehaviours.Infrastructure.Converters;assembly=WpfBehaviours.Infrastructure"
                    xmlns:utils="clr-namespace:WpfBehaviours.Modules.Dealing.Utils">



    <Style TargetType="ProgressBar" x:Key="SegmentedProgressBarStyle">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ProgressBar">
                    <Grid x:Name="LayoutRoot">
                        <!-- attach the view model -->
                        <controls:CircularProgressBarViewModel.Attach>
                            <controls:SegmentedProgressBarViewModel 
                                HoleSizeFactor="0.7" SegmentCount="{x:Static utils:Globals.ProgressSegments}"/>
                        </controls:CircularProgressBarViewModel.Attach>

                        <!-- render the segments -->
                        <ItemsControl ItemsSource="{Binding Segments}">
                            <ItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <Grid/>
                                </ItemsPanelTemplate>
                            </ItemsControl.ItemsPanel>
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <Grid>
                                        <!-- a grey segment -->
                                        <controls:PiePiece CentreX="{Binding Parent.CentreX}" CentreY="{Binding Parent.CentreY}"
                                                RotationAngle="{Binding StartAngle}" WedgeAngle="{Binding WedgeAngle}"
                                                Radius="{Binding Parent.Radius}" InnerRadius="{Binding Parent.InnerRadius}"
                                                Fill="LightGray" Stroke="White" Opacity="0.5"/>
                                        <!-- a blue segment, with an Opacity bound to the view model -->
                                        <controls:PiePiece CentreX="{Binding Parent.CentreX}" CentreY="{Binding Parent.CentreY}"
                                                RotationAngle="{Binding StartAngle}" WedgeAngle="{Binding WedgeAngle}"
                                                Radius="{Binding Parent.Radius}" InnerRadius="{Binding Parent.InnerRadius}"
                                                Fill="{DynamicResource AccentBrush}" Stroke="White" Opacity="{Binding Opacity}"/>
                                    </Grid>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <DataTemplate DataType="{x:Type viewModels:RateViewModel}">
        <StackPanel Orientation="Horizontal">
            <Label x:Name="RatePart1" Content="{Binding Part1}" FontSize="20" Foreground="Black" 
                               FontWeight="Bold" VerticalAlignment="Center" Visibility="Visible"/>
            <Label x:Name="RatePart2" Content="{Binding Part2}" FontSize="40" Foreground="Red" 
                               FontWeight="Bold" VerticalAlignment="Center" Visibility="Visible"/>
            <Label x:Name="RatePart3" Content="{Binding Part3}" FontSize="25" Foreground="Blue" 
                               FontWeight="Bold" VerticalAlignment="Center" Visibility="Visible"/>
        </StackPanel>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding IsEnabled}" Value="False">
                <Setter TargetName="RatePart1" Property="Foreground" 
                                    Value="{DynamicResource StandardDisabledBrush}"/>
                <Setter TargetName="RatePart2" Property="Foreground" 
                                    Value="{DynamicResource StandardDisabledBrush}"/>
                <Setter TargetName="RatePart3" Property="Foreground" 
                                    Value="{DynamicResource StandardDisabledBrush}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>


    <DataTemplate DataType="{x:Type viewModels:SpotTileViewModel}">
        <Border BorderBrush="{DynamicResource AccentBrush}" BorderThickness="2,2,2,2"
                Background="White" IsHitTestVisible="True">

            <Grid Background="White"
                attachedProps:GridUtils.ColumnDefinitions="*"
                attachedProps:GridUtils.RowDefinitions="Auto,Auto,Auto,*,Auto">
 

                <Grid HorizontalAlignment="Stretch" Background="{DynamicResource AccentBrush}">
                    <Label Foreground="White" Content="Spot Tile" VerticalAlignment="Center"
                            VerticalContentAlignment="Center" Margin="2,0,0,0"  />
                    <Button Style="{DynamicResource toolbarButtonStyle}"
                                            HorizontalAlignment="Right"
                                            VerticalAlignment="Center" VerticalContentAlignment="Center" Margin="0,0,0,0"
                                            Command="{Binding CloseViewCommand}" ToolTip="Close">
                        <Viewbox Width="40" Height="40">
                            <Grid>
                                <Grid Width="128" Height="128" >
                                    <Rectangle Fill="{Binding RelativeSource={RelativeSource AncestorType={x:Type Button} }, Path=Background}"
                                        Margin="20"/>
                                </Grid>
                                <Path Data="F1M54.0573,47.8776L38.1771,31.9974 54.0547,16.1198C55.7604,14.4141 55.7604,11.6511 54.0573,9.94531 52.3516,8.23962 49.5859,8.23962 47.8802,9.94531L32.0026,25.8229 16.1224,9.94531C14.4167,8.23962 11.6511,8.23962 9.94794,9.94531 8.24219,11.6511 8.24219,14.4141 9.94794,16.1198L25.8255,32 9.94794,47.8776C8.24219,49.5834 8.24219,52.3477 9.94794,54.0534 11.6511,55.7572 14.4167,55.7585 16.1224,54.0534L32.0026,38.1745 47.8802,54.0534C49.5859,55.7585 52.3516,55.7572 54.0573,54.0534 55.7604,52.3477 55.763,49.5834 54.0573,47.8776z" 
                                    Stretch="Uniform" Fill="{Binding RelativeSource={RelativeSource AncestorType={x:Type Button} }, Path=Foreground}" Width="26" Height="26" />
                            </Grid>
                        </Viewbox>
                    </Button>
                </Grid>
                
                <StackPanel Orientation="Horizontal" Grid.Row="1">
                    
                    <ComboBox HorizontalAlignment="Center" Width="80" Margin="2"
                                ItemsSource="{Binding FakeSpotPairs}" SelectedItem="{Binding FakeSpotPair}"
                                IsEnabled="{Binding IsEnabled}"/>
                    <DatePicker SelectedDate="{Binding SelectedDate}" Width="100" Margin="2"
                                IsEnabled="{Binding IsEnabled}"/>
                </StackPanel>
             
                
                <Grid Background="White" Grid.Row="2"
                    attachedProps:GridUtils.ColumnDefinitions="*,*"
                    attachedProps:GridUtils.RowDefinitions="Auto">

                 
                    <ContentControl Content="{Binding RateViewModel}"
                                    Margin="2,0,0,0"
                                    IsEnabled="{Binding IsEnabled}"/>

                    <StackPanel Grid.Row="0" Grid.Column="1" 
                                Orientation="Vertical"
                                Visibility="{Binding StartedTiming, 
                                    Converter={x:Static converters:BoolToVisibilityConverter.Instance},
                                    ConverterParameter='True'}">

                        <ProgressBar Value="{Binding Progress}" 
                                        Style="{StaticResource SegmentedProgressBarStyle}" 
                                        Margin="5" Width="40" Height="40"></ProgressBar>


                        <Label Content="{Binding TimeOutRemaining}" IsEnabled="{Binding IsEnabled}"
                                VerticalAlignment="Bottom" HorizontalAlignment="Center" Margin="2"/>
                    </StackPanel>

                </Grid>
                
                <Button Content="Ok" Margin="2" Grid.Row="4" Command="{Binding OkCommand}"/>
                
            </Grid>
        </Border>

        
    </DataTemplate>


</ResourceDictionary>